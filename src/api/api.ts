/* tslint:disable */
/* eslint-disable */
/**
 * letter_api API
 * letter_api API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BankInformation
 */
export interface BankInformation {
    /**
     * 
     * @type {string}
     * @memberof BankInformation
     */
    'orgName': string;
    /**
     * 
     * @type {string}
     * @memberof BankInformation
     */
    'bankName': string;
    /**
     * 
     * @type {string}
     * @memberof BankInformation
     */
    'iban': string;
}
/**
 * 
 * @export
 * @interface LetterConfigModel
 */
export interface LetterConfigModel {
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'content': string;
    /**
     * 
     * @type {boolean}
     * @memberof LetterConfigModel
     */
    'includeSignUp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LetterConfigModel
     */
    'signUpIncludeAbroadClause'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LetterConfigModel
     */
    'includeFrontPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LetterConfigModel
     */
    'includeHolidayLawPage'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'organizationName': string;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'website'?: string;
    /**
     * 
     * @type {Array<Vorstand>}
     * @memberof LetterConfigModel
     */
    'people': Array<Vorstand>;
    /**
     * 
     * @type {BankInformation}
     * @memberof LetterConfigModel
     */
    'bankInformation'?: BankInformation;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof LetterConfigModel
     */
    'logo': LetterConfigModelLogoEnum;
}

export const LetterConfigModelLogoEnum = {
    Dpsg: 'DPSG',
    Langenbach: 'Langenbach',
    Moosburg: 'Moosburg'
} as const;

export type LetterConfigModelLogoEnum = typeof LetterConfigModelLogoEnum[keyof typeof LetterConfigModelLogoEnum];

/**
 * 
 * @export
 * @interface Vorstand
 */
export interface Vorstand {
    /**
     * 
     * @type {string}
     * @memberof Vorstand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Vorstand
     */
    'role': VorstandRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof Vorstand
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Vorstand
     */
    'phone'?: string;
}

export const VorstandRoleEnum = {
    Vorstand: 'Vorstand',
    Vorstaendin: 'Vorstaendin',
    Kurat: 'Kurat',
    Kuratin: 'Kuratin'
} as const;

export type VorstandRoleEnum = typeof VorstandRoleEnum[keyof typeof VorstandRoleEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LetterConfigModel} letterConfigModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LetterPost: async (letterConfigModel: LetterConfigModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'letterConfigModel' is not null or undefined
            assertParamExists('apiV1LetterPost', 'letterConfigModel', letterConfigModel)
            const localVarPath = `/api/v1/letter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(letterConfigModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteBasicGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/protected/route/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteFormGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/protected/route/form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1HealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1HealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1HealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LetterConfigModel} letterConfigModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LetterPost(letterConfigModel: LetterConfigModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LetterPost(letterConfigModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LetterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async protectedRouteBasicGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.protectedRouteBasicGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.protectedRouteBasicGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async protectedRouteFormGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.protectedRouteFormGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.protectedRouteFormGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HealthGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiV1HealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LetterConfigModel} letterConfigModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LetterPost(letterConfigModel: LetterConfigModel, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV1LetterPost(letterConfigModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteBasicGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.protectedRouteBasicGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteFormGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.protectedRouteFormGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1HealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1HealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LetterConfigModel} letterConfigModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LetterPost(letterConfigModel: LetterConfigModel, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LetterPost(letterConfigModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public protectedRouteBasicGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).protectedRouteBasicGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public protectedRouteFormGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).protectedRouteFormGet(options).then((request) => request(this.axios, this.basePath));
    }
}



